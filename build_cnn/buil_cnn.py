# -*- coding: utf-8 -*-
"""buil_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VUaoX6kdX3mujJLG6jCwiw7JbVmptywJ
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

(X_train, y_train), (X_test, y_test) = tf.keras.datasets.cifar10.load_data()

print(f"X_train: {len(X_train)}")
print(f"X_test: {len(X_test)}")
print(f"y_train: {len(y_train)}")
print(f"y_test: {len(y_test)}")
print("x train")
print(X_train)
print("x test")
print(X_test)
print("y train")
print(y_train)
print("y test")
print(y_test)

print(X_test[789])

plt.imshow(X_test[789])
plt.show()
print(X_test[789].shape)

X_val = X_train[40000:]
y_val = y_train[40000:]
X_train = X_train[:40000]
y_train = y_train[:40000]

print(f"X_train: {len(X_train)}")
print(f"X_val: {len(X_val)}")
print(f"X_test: {len(X_test)}")

X_train = X_train/255
X_val = X_val/255
X_test = X_test/255

model = tf.keras.Sequential()

model.add(tf.keras.layers.Conv2D(32,kernel_size=(3,3),strides=(1,1),padding="same",
                                 activation="relu",
                                 input_shape=(32,32,3)))
model.add(tf.keras.layers.MaxPooling2D((2,2)))

model.add(tf.keras.layers.Conv2D(64,
                                 kernel_size=(3,3),
                                 strides=(1,1),
                                 padding="same",
                                 activation="relu"))
model.add(tf.keras.layers.MaxPooling2D((2,2)))
model.add(tf.keras.layers.Conv2D(64,
                                 kernel_size=(3,3),
                                 strides=(1,1),
                                 padding="same",
                                 activation="relu"))

model.add(tf.keras.layers.Flatten())

model.add(tf.keras.layers.Dense(64, activation="relu"))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(64, activation="relu"))
model.add(tf.keras.layers.Dropout(0.5))

model.add(tf.keras.layers.Dense(10,activation="softmax"))

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])

results = model.fit(X_train, y_train,batch_size=128,epochs=50,validation_data=(X_val,y_val))

plt.plot(results.history["loss"], label="loss")
plt.plot(results.history["val_loss"], label="val_loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.show()

plt.plot(results.history["accuracy"], label="accuracy")
plt.plot(results.history["val_accuracy"], label="val_accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.show()

model.evaluate(X_test, y_test)

prediction_result = model.predict(X_test[789].reshape(1,32,32,3))
print(prediction_result)

predicted_class = prediction_result.argmax()
predicted_probability = prediction_result.max()

print(f"This image belongs to class {predicted_class} with {predicted_probability} probability.")