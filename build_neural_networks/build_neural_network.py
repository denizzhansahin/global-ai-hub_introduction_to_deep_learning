# -*- coding: utf-8 -*-
"""build_neural_network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GQ90oXV1FhBkqNXVXTBgN-o9jawqgQL3
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, minmax_scale
from sklearn.model_selection import train_test_split

data = pd.read_excel('date_fruit.xlsx')

data.head()

print(data.shape)
print(data['Class'].unique())

X = data.drop('Class', axis=1)
y = data.loc[:,'Class']
print(X)
print(y)

X_scaled = minmax_scale(X)
X = pd.DataFrame(X_scaled)
print(X)

print(X.head())

encoder = LabelEncoder()
y = encoder.fit_transform(y)
print(y)

X_train, X_temporary, y_train, y_temporary = train_test_split(X,y,train_size = 0.8)
X_val, X_test, y_val, y_test = train_test_split(X_temporary, y_temporary, train_size=0.5)
print(X_train)
print(X_temporary)
print(y_train)
print(y_temporary)
print(X_val)
print(X_test)
print(y_val)
print(y_test)

print(f'length of the datashet: {len(X)}')
print(f'length of the training datashet: {len(X_train)}')
print(f'length of the validation datashet: {len(X_val)}')
print(f'length of the test datashet: {len(X_test)}')

import tensorflow as tf

model = tf.keras.Sequential()

#input layer
input_layer = tf.keras.layers.Dense(4096, activation='relu')
model.add(input_layer)

#hidder layer
model.add(tf.keras.layers.Dense(4096, activation='relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(4096, activation='relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(4096, activation='relu'))
model.add(tf.keras.layers.Dropout(0.5))
model.add(tf.keras.layers.Dense(4096, activation='relu'))
model.add(tf.keras.layers.Dropout(0.5))

#output layer
model.add(tf.keras.layers.Dense(7,activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

results = model.fit(X_train, y_train, epochs=100, validation_data=(X_val,y_val))

plt.plot(results.history['loss'], label='Train')
plt.plot(results.history['val_loss'], label = 'Test')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

test_results = model.test_on_batch(X_test,y_test)
print(test_results)